[{"C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\App.js":"1","C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\features\\TermDataTable\\TermDataTable.js":"2","C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\features\\TermDataTable\\index.js":"3","C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\reportWebVitals.js":"4","C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\index.js":"5"},{"size":197,"mtime":1610503715009,"results":"6","hashOfConfig":"7"},{"size":2471,"mtime":1610665235018,"results":"8","hashOfConfig":"7"},{"size":79,"mtime":1610503679802,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1607557116405,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1607557116405,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"101kyxj",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\App.js",[],"C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\features\\TermDataTable\\TermDataTable.js",["23","24"],"import {useState, useEffect} from 'react';\r\nimport { Pagination, Table } from 'antd';\r\n\r\n// This is a basic solution which loads data each time the index or the page size is changed\r\n// A more efficient solution would be to cache each page in a redux store\r\n// and each time a cached index is selected use the cache instead of \"GET\"ting tha data again\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Label',\r\n    dataIndex: 'label',\r\n    sorter: true,\r\n    width: '20%',\r\n  },\r\n  {\r\n    title: 'Short form',\r\n    dataIndex: 'short_form',\r\n    sorter: true,\r\n    width: '10%',\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n    width: '20%',\r\n  },\r\n  {\r\n    title: 'Iri',\r\n    dataIndex: 'iri',\r\n    width: '10%',\r\n  },\r\n  {\r\n    title: 'Ontology Iri',\r\n    dataIndex: 'ontology_iri',\r\n    width: '10%',\r\n  },\r\n];\r\n\r\nfunction TermDataTable(){\r\n  const [terms, setTerms] = useState([]);\r\n  const [page, setPage] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  function handleChange(pagination){\r\n\r\n    // antd returns the page number starting from 1 so we decrement once\r\n    setCurrentPage(pagination.current-1);\r\n    setPageSize(pagination.pageSize)\r\n  }\r\n\r\n  async function getData(){\r\n    try{\r\n      let url = `https://www.ebi.ac.uk/ols/api/ontologies/efo/terms?page=${currentPage}&size=${pageSize}`;\r\n      let response = await fetch(url);\r\n      setLoading(true);\r\n      let data = await response.json();\r\n      setLoading(false);\r\n      setTerms(data._embedded.terms);\r\n      setPage(data.page);\r\n    }catch(e){\r\n      setLoading(false);\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    getData();\r\n  },[currentPage, pageSize])\r\n\r\n  const pagination = {\r\n    current: currentPage,\r\n    pageSize: pageSize,\r\n  }\r\n  return(\r\n    <div>\r\n      {/*{terms.map(term=>{\r\n        return(\r\n          <div>\r\n            {term.label}\r\n          </div>\r\n        )\r\n      })}\r\n      {page?<Pagination total={page.totalElements}\r\n        defaultPageSize={page.size}\r\n        onChange={handleChange}\r\n      />:null}*/}\r\n      <Table columns={columns} dataSource={terms}\r\n        pagination={{\r\n          ...pagination,\r\n          total: page?.totalElements,\r\n        }}\r\n        loading={loading}\r\n        onChange={handleChange} rowKey={record => record.label}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TermDataTable;\r\n","C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\features\\TermDataTable\\index.js",[],"C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\reportWebVitals.js",[],"C:\\Users\\Dimitris\\Desktop\\intelligencia-assessment\\src\\index.js",[],{"ruleId":"25","severity":1,"message":"26","line":2,"column":10,"nodeType":"27","messageId":"28","endLine":2,"endColumn":20},{"ruleId":"29","severity":1,"message":"30","line":69,"column":5,"nodeType":"31","endLine":69,"endColumn":28,"suggestions":"32"},"no-unused-vars","'Pagination' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [currentPage, getData, pageSize]",{"range":"36","text":"37"},[1764,1787],"[currentPage, getData, pageSize]"]